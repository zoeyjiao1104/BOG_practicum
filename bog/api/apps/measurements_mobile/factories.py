"""
factories.py
"""

import factory
import pytz
import random
from .models import (
    MobileMeasurement,
    MobileMeasurementEvent,
    MobileMeasurementEventNeighbor,
    MobileSensor
)
from ..sources.factories import SourceFactory


class MobileSensorFactory(factory.django.DjangoModelFactory):
    """
    A `DjangoModelFactory` for producing 
    fake `MobileSensor` instances.
    """
    class Meta:
        model = MobileSensor

    id = factory.Sequence(lambda n: f'Sensor {n}')
    source = factory.SubFactory(SourceFactory)


class MobileMeasurementEventFactory(factory.django.DjangoModelFactory):
    """
    A `DjangoModelFactory` for producing 
    fake `MobileMeasurementEvent` instances.
    """
    class Meta:
        model = MobileMeasurementEvent

    id = factory.Sequence(lambda n: n)
    datetime = factory.Faker("date_time", tzinfo=pytz.UTC)
    anomaly_score = factory.Faker("numerify", text="0.##")
    latitude = factory.Faker("latitude")
    longitude = factory.Faker("longitude")
    mobile_sensor = factory.SubFactory(MobileSensorFactory)


class MobileMeasurementEventNeighborFactory(factory.django.DjangoModelFactory):
    """
    A `DjangoModelFactory` for producing 
    fake `MobileMeasurementEventNeighbor` instances.
    """
    class Meta:
        model = MobileMeasurementEventNeighbor

    id = factory.Sequence(lambda n: n)
    mobile_event = factory.SubFactory(MobileMeasurementEvent)
    neighboring_mobile_event = factory.SubFactory(MobileMeasurementEventFactory)
    distance = factory.Faker("numerify", text="%!!!!.######")


class MobileMeasurementFactory(factory.django.DjangoModelFactory):
    """
    A `DjangoModelFactory` for producing 
    fake `MobileMeasurement` instances.
    """
    class Meta:
        model = MobileMeasurement

    id = factory.Sequence(lambda n: n)
    product = factory.Faker("random_element", elements=["wl", "at", "wt", "bt", "ws", "bs"])
    value = factory.Faker("random_number")
    type = factory.Faker("random_element", elements=["r", "m", "pr"])
    quality = factory.Faker("random_element", elements=["g", "na", "s", "b"])
    confidence = factory.Faker("numerify", text="0.##")
    mobile_measurement_event = factory.SubFactory(MobileMeasurementEventFactory)


class MobileSensorWithEventsFactory(MobileSensorFactory):
    """
    A `DjangoModelFactory` for producing 
    fake `MobileSensor` instances that
    contain one or more `MobileMeasurementEvent`
    instances.
    """

    @factory.post_generation
    def events(obj, create, extracted, **kwargs):
        """
        Creates a batch of `MobileMeasurementEvent`
        instances to associate with a newly-created
        `MobileSensor`. A random number of events
        between 1 and 10, inclusive, is generated
        by default unless specified.

        References:
        - https://factoryboy.readthedocs.io/en/stable/reference.html#factory.PostGeneration
        """
        if not create:
            return

        try:
            num_events = int(extracted) if extracted else random.randint(1, 10)
        except ValueError:
            raise ValueError("Invalid value received for 'extracted': "
                f"'{extracted}'. An integer was expected.")

        return MobileEventWithMeasurementsFactory.create_batch(
            size=num_events,
            mobile_sensor=obj)


class MobileEventWithMeasurementsFactory(MobileMeasurementEventFactory):
    """
    A `DjangoModelFactory` for producing 
    fake `MobileMeasurementEvent` instances
    with one or more `MobileMeasurement`
    instances.
    """

    @factory.post_generation
    def measurements(obj, create, extracted, **kwargs):
        """
        Creates a batch of `MobileMeasurement`
        instances to associate with a newly-created
        `MobileMeasurementEvent`. A random number
        of events between 5 and 10, inclusive, is
        generated by default unless specified.

        References:
        - https://factoryboy.readthedocs.io/en/stable/reference.html#factory.PostGeneration
        """
        if not create:
            return

        try:
            num_measurements = int(extracted) if extracted \
                else random.randint(5, 10)
        except ValueError:
            raise ValueError("Invalid value received for 'extracted': "
                f"'{extracted}'. An integer was expected.")

        return MobileMeasurementFactory.create_batch(
            size=num_measurements,
            mobile_measurement_event=obj)

